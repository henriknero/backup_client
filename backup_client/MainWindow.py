#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.3 on Fri Dec 28 15:55:53 2018
#
import os
import wx
import _thread
from wx.adv import TaskBarIcon
import logging
from backup_client.TaskBarIcon import TaskBarIcon
from backup_client.filehandler.pickles import save_obj, load_obj
from backup_client.network import get_reponame_from_path, is_repo, remove_local_repo_data

logger = logging.getLogger(__name__)
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class Root(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Root.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((254, 335))

        self.gitgogs = None
        # Menu Bar
        self.frame_menubar_copy = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Add Folder", "")
        self.Bind(wx.EVT_MENU, self.add_folder, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Connect to Existing Remote", "")
        self.Bind(wx.EVT_MENU, self.connect_remote, id=item.GetId())
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Logout and Quit", "")
        self.Bind(wx.EVT_MENU, self.logout, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Quit", "")
        self.Bind(wx.EVT_MENU, self.onClose, id=item.GetId())
        self.frame_menubar_copy.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Hide", "")
        self.Bind(wx.EVT_MENU, self.iconify, id=item.GetId())
        self.frame_menubar_copy.Append(wxglade_tmp_menu, "Window")
        self.SetMenuBar(self.frame_menubar_copy)
        # Menu Bar end
        self.monitored_folders = wx.ListBox(self, wx.ID_ANY, choices=[])

        self.popup_menu = wx.Menu()
        item = self.popup_menu.Append(wx.ID_ANY, "Remove Remote Repository")
        self.Bind(wx.EVT_MENU, self.remove_folder_git, id=item.GetId())

        self.monitored_folders.Bind(wx.EVT_RIGHT_DOWN, self.RightClickEvent)

        self.tray_item = None

        self.__set_properties()
        self.__do_layout()

        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Root.__set_properties
        self.SetTitle("gibc")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Root.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.monitored_folders, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
    
    def RightClickEvent(self, event):
        item = self.monitored_folders.HitTest(event.Position)
        if item > -1:
            self.monitored_folders.SetSelection(item)
            self.monitored_folders.PopupMenu(self.popup_menu,event.Position)
    
    def load_stored_patterns(self):
        try:
            temp = load_obj("patterns")
            logger.info("Patterns: Loading") if temp else logger.info("No Patterns to Load")
            for obj in temp:
                reponame = get_reponame_from_path(obj)
                if reponame is None:
                    answer = wx.MessageBox("Local repository in {} does not exist, do you want to create it?".format(obj), "Repository not found", wx.YES_NO)
                    if answer:
                        self.add_folder(path=obj)
                else:
                    _thread.start_new_thread(self.gitgogs.add_dir, (obj, reponame))
                    self.monitored_folders.Append(reponame)
            if temp : logger.info("Patterns:Done Loading")
        except FileNotFoundError:
            pass

    def on_selected_dir(self, event):
            pass
    
    def add_folder(self, event=None, path=os.path.expanduser('~')):
        # wxGlade: Root.<event_handler>
        dir_path = wx.DirSelector(default_path=path)
        #filedialog.askdirectory(initialdir=askdir)
        if isinstance(dir_path, str) and dir_path != '':
            git_name = wx.GetTextFromUser(
                "Enter the name you want for the git repo and what you will see",
                "Alias for folder"
                )
        if not os.path.isdir(dir_path):
            return

        self.gitgogs.add_dir(dir_path, git_name)
        self.monitored_folders.Append(git_name)

    def remove_folder_git(self, event):
        repo_name = self.monitored_folders.GetString(self.monitored_folders.GetSelection())
        #repo_name = self.monitored_files.get(self.monitored_files.curselection())
        try:
            self.gitgogs.remove_dir(repo_name)
            self.monitored_folders.Delete(self.monitored_folders.GetSelection())
        except NameError:
            logger.warning(" Repository {} was not found on remote server".format(repo_name)) 

    def connect_remote(self, event):  # wxGlade: Root.<event_handler>
        #TODO: This is wrong fix it idiot
        dir_path = wx.DirSelector("Folder to download repository too")
        if not is_repo(dir_path): # If local repository does not exist download repository to folder
            repo_name = wx.GetTextFromUser(
                "The folder you have entered does not contain any remote, please enter the name of remote folder",
                "Add Remote Folder"
                )
        else: # If choosen folder is existing repository, try to pull it to update local repository
            repo_name = get_reponame_from_path(dir_path)
        self.gitgogs.add_dir(dir_path,repo_name)
        self.monitored_folders.Append(repo_name)
        logger.info("Successfully added connected to %s" % repo_name)

    def logout(self, event):  # wxGlade: Root.<event_handler>
        os.remove(os.path.join(os.path.expanduser('~'), '.gibc/udata.pkl'))
        self.onClose(event)

    def onClose(self, event):  # wxGlade: Root.<event_handler>
        self.gitgogs.stop()
        save_obj(self.gitgogs.patterns, 'patterns')
        self.Close()

    def iconify(self, event):  # wxGlade: Root.<event_handler>
        self.Hide()

# end of class Root

class MainWindow(wx.App):
    def OnInit(self):
        self.frame = Root(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True
    def setGitGogs(self, gitgogs):
        self.frame.gitgogs = gitgogs
        self.frame.load_stored_patterns()
    def createTaskBarIcon(self, icon):
        self.frame.tray_item = TaskBarIcon(self.frame, icon)
